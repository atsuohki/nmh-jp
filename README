
 オリジナルのnmhは、ローケルとして ja_JP.UTF-8 を使用する限り
 (つまり、画面表示の文字コードがUTF-8であれば)、MIME形式の漢字を含む
 受信メイルを表示できます。(ただし、OS側のローケルの表示文字幅情報の
 不備による不具合が生じる可能性はある)
 一方、送信メイルの文字コードはUTF-8に限られます。

 本パッチは、
    ローケルが ja_JP.UTF-8 以外での画面表示、
    UTF-8に加えて、ISO-2022-JP、EUC-JP、SHIFT_JIS(おまけ)でのメイル送信、
    (MIME非対応の)旧JUNETメイルの表示
 を可能にします。

◎ nmh の日本語パッチ

	README		このファイル
	nmh-1.8-patch	日本語パッチ
	my-code		formatproc用サンプルコード
	sample/*	formatファイル、.mh_profileのサンプル

	○ nmh-1.8ソースツリーにnmh-1.8-patchを適用してから
	   INSTALLの手順にしたがってビルド。

	    configure --with-hash-backup --with-tls --with-cyrus-sasl
	    make
	    make install

	   なお、プロファイルに追加される項目は、
	   「変更履歴」の先頭部分を参照。

◎ MH-E の パッチ(おまけ)
	○ext-patch-27.x
	  送信メッセージの文字コードをContent-Typeのcharsetで
	  指定するためのパッチ

	  lisp/mh-e/mh-e.el
	  	カスタマイズ変数 mh-letter-use-charset を追加

	  lisp/mh-e/mh-comp.el
	      mh-send-letter():
	  	カスタマイズ変数 mh-letter-use-charset が non-nilの場合、
		Content-Typeのcharsetを取り出し、一時的に、
		mm-coding-system-priorities の前に加えて送信時の
		優先文字コードとする。


	○ext-mh-patch-28.x
	  送信メッセージの文字コードをContent-Typeのcharsetで
	  指定するためのパッチ(ext-patch-27.x相当)に加えて、
	  PGP署名付きメッセージ(本文に -----BGN PGP ....
	  が含まれるもの)がデコードされない問題に対処するパッチ。

	  lisp/mh-e/mh-e.el
	  	カスタマイズ変数 mh-letter-use-charset を追加

	  lisp/mh-e/mh-comp.el
	      mh-send-letter():
	  	カスタマイズ変数 mh-letter-use-charset が non-nilの場合、
		Content-Typeのcharsetを取り出し、一時的に、
		mm-coding-system-priorities の前に加えて送信時の
		優先文字コードとする。

	  lisp/gnus/mm-uu.el
	    mm-uu-pgp-signed-extract-1():
	    mm-uu-pgp-encrypted-extract-1():
		メッセージ内の該当部分の文字コードを設定する

	  lisp/mh-e/mh-mime.el
	    mh-mime-display():
		text/plainだけのメッセージが base64/quoted-printableで
		エンコードされている場合にあらかじめデコードしておく。
		("^-----BEGIN ...." 対策)
	    mh-decode-message-body():
		(Content-Typeの)charsetの指定が無い場合、
		undecidedを指定して本文をデコードする。
	    mh-press-button():
		検証ボタン等を押したあとに表示されるメッセージ内の
		メイルアドレスやURLの強調表示等が消えることへの対処。

	  lisp/mh-e/mh-show.el
	    mh-display-msg():
		表示メッセージ内に残っている未デコード部分を
		強引にデコードする。

==========================================================================
=== 変更履歴
==========================================================================
#------------------------------------------------------------------------
◎ .mh_profile への追加項目
encode_atom_wise: enable	atom毎にエンコードする
scan_text_plain: enable		scan時、adhocな方法で text/plain 部分を探す
force_8bit: enable		ローケルが UTF-8 以外でも8ビット透過で表示
wcwidth_fix: enable		表示文字幅の簡易補正(8ビット文字は1コラム、
				それ以外は2コラム)を有効にする。
				現行ローケルのLC_CTYPEファイル内の
				文字幅データに不備がある場合の処置
guess_8bit_charset: enable	euc-jp/utf-8/shift_jis を判定する
#------------------------------------------------------------------------

2022/04/01

 ◎ comp/repl/forw では、ドラフトファイルの文字コード
 (iso-2022-jp,euc-jp,utf-8,shift_jis)に従ってcharsetを設定する。
 ("guess_8bit_charset: enable")
 (不明の8ビットコードの場合には、プロファイルのlocaleに従う)

 ◎ ME-E(mh-send-letter)では、ドラフトファイルの文字コードにかかわらず
 Content-Typeのcharset指定に従う。(カスタマイズ変数 mh-letter-use-charset)
 (未指定の場合には、mm-coding-system-priorities に従う)
  ⇒ ext-patch-27.x を参照

2022/03/29

 nmh 自体ではなく、emacs27以降のMH-E関連の問題。

	From: %(decode(localmbox))
	Cc: %(decode(localmbox))
	To: 
	Subject: 
	Mime-Version: 1.0
	Content-Type: text/plain; charset=iso-2022-jp
	Content-Transfer-Encoding: 7bit
	--------

 のような components ファイルを用いるとcharsetパラメータが
 重複して表れる。

 原因：
  (mh-send-letter)@mh-e/mh-comp.el から(間接的に)呼ばれる
  (message-encode-message-body)@gnus/message.el において 
  ヘッダーフィールド "Content-Type: xxx;yyy;…" をフェッチし
  (mml-generate-mime multy ctype)@gnus/mml.el の ctype に渡す。
  mml-generate-mimeは、"charset=…" の有無にかかわらず、
  単に、ctypeの末尾に "; charset=…" を追加する。

  mh-send-letter にて、"Content-Type: xxx;yyy;…" があり、
  "charset=…"が指定されていたら、これを mm-coding-system-priorities
  の先頭に追加してからmime化を行う。

  ⇒ ext-patch-27.x を参照

2022/03/21

 (現ローケルのLC_CTYPEファイル内の定義不備に起因する)
 wcwidth()の戻り値の不具合に対する処理方法を変更。
 ("wcwidth_fix: enable")

2019/02/12

 capability UTF8  --- 単にUTF8コマンドを発行するのみ。

2018/04/26	変更点メモ

 iso-2022-jp対応パッチ

【TODO】
【test】
 ・テストスーツを実行する場合、
	(export LANG=en_US.UTF-8; export TZ="05:00"; make check-TEST)
   とする。
 ・gecosフィールドに日本語が含まれるとき、
   そのコードセットとLANGの設定が異なる場合には、
   test/format/test-mynameの"GECOS field test"に失敗する。
 ・FreeBSD では、
   test/inc/test-deb359167を回避するようになっているが、
   pkgでvalgrindをインストール後、root権限で
	sysctl security.bsd.unprivileged_proc_debug=1
   を実行しておけば、テストに成功する。

#------------------------------------------------------------------------
 components ファイル
	From: %(decode(localmbox))
	Cc: %(decode(localmbox))
	To: 
	Subject: 
	Mime-Version: 1.0
	Content-Type: text/plain; charset=iso-2022-jp
	Content-Transfer-Encoding: 7bit
	--------
 の中に mime 関連のヘッダーフィールド(最後の3行)があると、
 comp コマンド等ではエラーになるが、これらのヘッダーより前に
 8bit 文字がある場合にはエラーにならないように
 mhbuildコマンド(uip/mhbuildsbr.c) を修正。

 現状、mime 関連のヘッダーフィールドがなくても、
 本文が iso-2022-jp 文字の場合には
	Content-Type: text/plain; charset=iso-2022-jp
 が付加されるように修正。
 「guess_8bit_charset: enable」のときには、euc-jp/utf-8/shift_jis の場合にも同様。
 つまり、charsetの有無にかかわらず、ドラフトファイルの文字コードを優先。

#------------------------------------------------------------------------
scanコマンドのサマリー表示/showコマンドの改善

h/mh.h
	iso-2022-jp 関連のマクロ追加。

uip/scansbr.c
    scan():
	「scan_text_plain: enable」のとき
	(scan時には)メッセージ本体をデコード/文字コード変換するように変更。
	本文が multipart/XXX の場合、(adhocな方法でバッファ内の範囲で)
	text/plain部分を抽出するように変更。
	(multipart/digest の区切り行をスキップして表示)

	decode_b64_str() が１行分しか処理しないバグを修正。
	maybe_iso_2022_jp()、decode_qp_str()、decode_b64_str()、
	char_convert()、find_text_plain()を追加

uip/mhshowsbr.c
    convert_charset():
	iconvによる文字コード変換時のEILSEQには対応済みになったので、
	EINVALの場合にスキップするコードを追加。

uip/mhlsbr.c
    putcomp():
	「force_8bit: enable」のとき
	ヘッダの表示において、localeがUTF-8でない場合にも、
	7bitに強制する処理を無効化。

sbr/fmt_rfc2047.c
    decode_b64q(): 追加
	base64エンコードの4バイトを3バイトにデコード。

    decode_rfc2047():
	ヘッダーフィールドに含まれるiso-2022-jpコードシーケンスを
	表示できるようにコード変換を行う処理を追加(旧JUNETメイル対応)。
	base64のデコード処理をdecode_b64q()を使うように変更。
	戻り値が変更された[2022/03/02] (デコードの有無→文字列長)

sbr/fmt_scan.c
    cptrimmed():
    cpstripped():
	「wcwidth_fix: enable」のとき
	wcwidth()の戻り値が正しくないケースに対応。
	(wcwidth()を(つまり*/LC_CTYPEファイルを)修正するのが筋だが…
	 8ビット文字は1コラム、それ以外は2コラムと処理する。
#if 0
	 ただし、eucJPとUTF-8の場合、半角カタカナは1コラムとする。)
#endif

sbr/utils.c
    nmh_init():
	profile において、「locale: 」 が未設定の場合、
	(mhshowsbr.cでマルチバイト/ワイド文字を使用するが、
	 環境変数LANGを設定したくないので)環境変数LANGも未設定
	の場合には、LC_CTYPEを決め打ち(ja_JP.eucJP)で設定。

	LC_ALL を LC_CTYPE に変更

    find_euc_utf_sjis(): find_euc_utf() から変更
	「guess_8bit_charset: enable」のとき
	与えられた文字列のcharset(euc-jp、utf-8、shift_jis)を返す。
	euc-jpとshift_jisの区別がつかない場合にはeuc-jpとする。
	utf-8とshift_jisの区別がつかない場合にはutf-8とする。
	それ以外の場合は、NULLを返す。

#----------------------------------
mhlistコマンド

uip/mhlistsbr.c
    list_content():
	未デコード部分に対処

#----------------------------------
mhbuildコマンドのiso-2022-jp対応

sbr/encode_rfc2047.c
    encode_rfc204():
	ヘッダフィールドにiso-2022-jpコードを含む場合、
	文字セットをiso-2022-jp、base64符号化を使用するように変更。
	「guess_8bit_charset: enable」のとき、euc-jpかutf-8に従って
	base64かquoted-printableで符号化を使用する。

    field_encode_base64():
	「encode_atom_wise: enable」のとき、
	ヘッダフィールドにiso-2022-jpコードを含む場合、
	当該部分を(空白で区切られた)トークン単位にbase64符号化する。
	ただし、連続するトークンにiso-2022-jpコードが含まれる場合には
	それらを1つのトークンにまとめる。
	(JIS漢字コードシーケンスの途中で分割して符号化しないように対応。
	 eucJP文字の途中で分割しないように対応。)

    scanstring():
	iso-2022-jpコードシーケンス有無の判定を追加

sbr/mf.c
    my_lex():
	iso-2022-jpコードシーケンスを分割せずに読み込む処理を追加。

sbr/unquote.c
    unquote_string():
	iso-2022-jpコードシーケンスはアンクォート処理の対象としない。

uip/mhbuildsbr.c
    scan_content():
	テキスト部分にiso-2022-jpコードシーケンスを含む場合、
	「Content-Type: text/plain; charset="iso-2022-jp"」
	を追加する処理。
	「guess_8bit_charset: enable」のとき、euc-jpやutf-8も
	同様に処理。

	なお、オリジナルでは、7ビットコードは us-ascii、
	8ビットコードは	profileの「locale: 」をcharsetとする。

    build_headers():
	commentの出力処理にrfc2047エンコード化を追加

uip/mhparse.c
	mhbuild directive内のiso-2022-jpを処理するための変更

    get_ctinfo():
	mhbuild directiveのdescription"[]"と
	disposition"{}"の処理をiso-2022-jp対応

    get_comment():
	iso-2022-jpの処理を追加

    parse_header_attrs():
	(クォートされた)valueにiso-2022-jpの処理を追加

	Content-Typeヘッダー内「attribute=value」のvalueの
	エンコードはrfc2231で規定されるが、
	valueにrfc2047形式(=?charset?{B|Q}?…?=)を用いている
	場合の対処(mhfixmsgの場合には適用しない)。
	decode_rfc2047()で行う文字コード変換の
	変換先文字コードをcharsetに設定。

    param_len():
	iso-2022-jpの処理を追加

uip/whatnowsbr.c
    checkmimeheader():
	ヘッダー内にiso-2022-jpコードシーケンスや8ビットコードがある場合、
	MIME-Versionがあってもエラー扱いしない。

#------------------------------------------------------------------------
(repl/forwコマンドから呼ばれた)mhlから呼び出す外部フォーマター。
(外部フォーマターには、標準入力を介してメッセージ本体が与えられる)。
つぎのどちらかを使う。

my-code/repl-format.c
	出力文字コードは環境変数LANGに従うが、未設定の場合は euc-jp。
	引数で指定されたContent-Typeの値とContent-Transfer-encodingの値
	にしたがって、(標準入力から与えられる)メッセージ本体をスキャンし、
	text/plainの部分のみを抽出する。

my-code/repl-format.sh
	同様の機能をmhshowで実装したシェルスクリプト版。
	出力文字コードはprofileの「locale: 」、あるいは、環境変数LANGに従う。


	repl/forwコマンドに-formatオプションを指定すると使われる
	フィルタファイル、mhl.reply や mhl.forward、あるいは、
	-filterオプションで指定するファイルにおいて、

	body:<any spec you want>,\
	format,\
	formatarg=":=HDRT=:%{content-type}:=HDRE=:%{content-transfer-encoding}"

	のように指定する。
	(-format/-filterオプション等は、.mh_profile に記述できる)

	さらに、 .mh_profileにおいて
	formatproc:	<上記プログラムのどちらかの絶対パス名>
	を指定しておく。

	【注】repl/forwコマンドの-formオプションは、
	「メッセージヘッダ」の作成に寄与する。
	一方、-format/-filterオプションは、「メッセージボディ」の
	作成に寄与する。

#---------------------------------------------------------
【mh-e の利用について】

・上記のように変更したnmhでは、mh-smail/mh-reply/mh-forward 等が
  呼び出したcomp/repl/forwコマンドが作成したファイルの文字コードと、
  そのファイル内のヘッダー部に記述された
	Content-Type: text/plain; charset=XXXX
  を指定する文字コードと不整合が生じる可能性がある
  (mh-eが面倒を見ているようだが…)。

  ちょっと気持悪いので、これらのコマンドが作成したファイルのヘッダ
  フィールドにcharset=XXXXが指定してある場合、これに従うようにするには、
  つぎのコードを.emacs等に入れておく。

; make buffer code iso-2022-jp for mh-letter-mode
(defun mh-set-letter-mode-coding-system ()
  (let* ((case-fold-search t)
	 (charstr (mh-get-header-field "Content-Type:"))
	 (code-name
	  (and (string-match "charset=\\(\"?\\)\\([^ ;\"]+\\)\\1" charstr)
	       (match-string 2 charstr)))
	 (code-sym (and code-name (intern (downcase code-name)))))
    (set-buffer-file-coding-system (if (and code-sym (coding-system-p code-sym))
				       code-sym
				     'iso-2022-jp))))

(add-hook 'mh-letter-mode-hook
	  'mh-set-letter-mode-coding-system)

  (mh-letter-mode-hookは、customize機構で設定するのが正しい？)

・mh-forward は、Subject: の有無に関わらず
  (mh-forwarded-letter-subject 元from 元subject)
  で生成した文字列をSubject:に追加する。
  forwardcomp等でSubject:の内容を指定している場合には、
  (バグもあり)うっとうしいので、変数 mh-forward-subject-format
  に空文字列 "" を設定する。

・mh-forward は、変数 mh-compose-forward-as-mime-flag により、
  元メッセージを添付にするか否かを制御する。
  上記変更の repl-format をforwコマンドのフィルタで使用する場合には、
  nil としておくのがよい(個人的好み)。

・mh-rmailはscanコマンドを呼び出す。(デフォルトを変更せずに)
  このプロセス通信に使用するコーディングシステムを指定するには、
  つぎのコードを.emacs等に入れておく。

(modify-coding-system-alist 'process
			     "nmhコマンド群の絶対パス名" 
			     'コーディングシステム名)
